name: monorepo

packages:
  - apps/**
  - packages/**

# Safer bootstrap to avoid Flutter startup lock
command:
  bootstrap:
    runPubGetInParallel: false
    usePubspecOverrides: true

scripts:
  # ---------- Maintenance ----------
  clean: melos exec --concurrency=1 -- "flutter clean"
  clean:deep: melos exec --concurrency=1 -- "git clean -xfd -e .idea -e .vscode" # CAREFUL: nukes untracked files

  bootstrap: melos bootstrap

  pub:get: melos exec --concurrency=1 -- "flutter pub get"
  pub:get:core: melos exec --scope="core" --concurrency=1 -- "flutter pub get"
  pub:upgrade: melos exec --concurrency=1 -- "flutter pub upgrade"
  pub:outdated: melos exec --concurrency=1 -- "flutter pub outdated"
  pub:deps: melos exec --concurrency=1 -- "flutter pub deps --style=compact"
  pub:cache:repair: melos exec --scope="*" --concurrency=1 -- "flutter pub cache repair"
  doctor: melos exec --concurrency=1 -- "flutter doctor -v"

  # ---------- Codegen (only where it's needed) ----------
  gen: melos exec --fail-fast --depends-on build_runner -- "dart run build_runner build --delete-conflicting-outputs"
  gen:watch: melos exec --fail-fast --depends-on build_runner -- "dart run build_runner watch --delete-conflicting-outputs"
  gen:clean: melos exec --depends-on build_runner -- "dart run build_runner clean"

  # ---------- Lints & format ----------
  fix:dry: melos exec -- "dart fix --dry-run"
  fix:apply: melos exec -- "dart fix --apply"

  # Write formats code in-place (never fails)
  format:write: melos exec -- "dart format ."
  # CI check (fails if formatting is needed)
  format:check: melos exec -- "dart format --output=none --set-exit-if-changed ."
  # Optional quick fix across all packages
  format:fix: melos exec -- "dart format --fix ."

  # Analyzer (choose one)
  # analyze: melos exec -- "dart analyze --fatal-infos"   # strict (fails on infos)
  analyze: melos exec --fail-fast -- "flutter analyze" # pragmatic (fails on errors)

  # ---------- Tests ----------
  vg:test: melos exec --concurrency=1 -- "very_good test --coverage --test-randomize-ordering-seed random"
  test: melos exec -- "flutter test --no-pub --concurrency=4"
  coverage:
    melos exec --scope="app_on_*" -- "flutter test --coverage --no-pub"

    # ------ Coverage per app -------
  # --- Coverage per app (safe multiline) ---
  coverage:bloc: |
    melos exec --scope="app_on_bloc" --concurrency=1 -- \
      bash -lc 'flutter test --coverage --no-pub && genhtml coverage/lcov.info -o coverage/html && (open coverage/html/index.html || xdg-open coverage/html/index.html || start coverage\\html\\index.html)'

  coverage:riverpod: |
    melos exec --scope="app_on_riverpod" --concurrency=1 -- \
      bash -lc 'flutter test --coverage --no-pub && genhtml coverage/lcov.info -o coverage/html && (open coverage/html/index.html || xdg-open coverage/html/index.html || start coverage\\html\\index.html)'

  # ---------- Run (per app & flavor) ----------
  run:bloc:dev: melos exec --scope="app_on_bloc" --concurrency=1 -- "flutter run --flavor development -t lib/main_development.dart"
  run:bloc:stg: melos exec --scope="app_on_bloc" --concurrency=1 -- "flutter run --flavor staging     -t lib/main_staging.dart"
  run:bloc:prod: melos exec --scope="app_on_bloc" --concurrency=1 -- "flutter run --flavor production  -t lib/main_production.dart"

  run:riverpod:dev: melos exec --scope="app_on_riverpod" --concurrency=1 -- "flutter run --flavor development -t lib/main_development.dart"
  run:riverpod:stg: melos exec --scope="app_on_riverpod" --concurrency=1 -- "flutter run --flavor staging     -t lib/main_staging.dart"
  run:riverpod:prod: melos exec --scope="app_on_riverpod" --concurrency=1 -- "flutter run --flavor production  -t lib/main_production.dart"

  # ---------- Builds ----------
  build:bloc:apk:dev: melos exec --scope="app_on_bloc" --concurrency=1 -- "flutter build apk       --flavor development -t lib/main_development.dart"
  build:bloc:aab:prod: melos exec --scope="app_on_bloc" --concurrency=1 -- "flutter build appbundle --flavor production  -t lib/main_production.dart"

  build:riverpod:apk:dev: melos exec --scope="app_on_riverpod" --concurrency=1 -- "flutter build apk       --flavor development -t lib/main_development.dart"
  build:riverpod:aab:prod: melos exec --scope="app_on_riverpod" --concurrency=1 -- "flutter build appbundle --flavor production  -t lib/main_production.dart"

  # iOS (requires codesigning set up)
  build:ios:bloc:dev: melos exec --scope="app_on_bloc" --concurrency=1 -- "flutter build ipa --flavor development -t lib/main_development.dart"
  build:ios:riverpod:dev: melos exec --scope="app_on_riverpod" --concurrency=1 -- "flutter build ipa --flavor development -t lib/main_development.dart"

  # ---------- Workspace checks ----------
  check: melos run format:check && melos run analyze && melos run test
  ci: melos run check

  # ---------- Versioning (per-package releases if ever needed) ----------
  release: melos version
